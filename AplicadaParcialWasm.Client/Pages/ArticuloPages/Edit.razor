@page "/Articulo/Editar/articuloId={ArticuloId:int}"

@inject IClienteService<Articulos> articuloService
@inject NavigationManager navigation
@rendermode InteractiveWebAssembly

<PageTitle>Editar Art&iacute;culo</PageTitle>
<EditForm Model="Articulo" OnValidSubmit="Editar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header text-white text-center">
				<div class="bg-primary rounded">
					<h1>Editar Art&iacute;culo</h1>
				</div>
			</div>
			@*Body*@
			<div class="card-body">
				<div class="col-1">
					@*Id*@
					<label class="form-label" for="Id">Id</label>
					<InputNumber id="Id" class="form-control" readonly @bind-Value="Articulo.ArticuloId"></InputNumber>
				</div>
				<div class="row">
					@*Descripcion*@
					<div class="col-3">
						<label class="form-label" for="Nombres">Nombre</label>
						<InputText id="Nombres" class="form-control" @bind-Value="Articulo.Descripcion" placeholder="Ej: Coca Cola"></InputText>
						<ValidationMessage For="@(()=>Articulo.Descripcion)"></ValidationMessage>
					</div>
					@*Costo*@
					<div class="col-3">
						<label class="form-label" for="costo"><strong>Costo</strong></label>
						<input class="form-control" id="costo" @bind="Costo" @bind:event="oninput" />
						<ValidationMessage For="(()=> Articulo.Costo)" />
					</div>
					@*Ganancia*@
					<div class="col-3">
						<label class="form-label" for="ganancia"><strong>Ganancia</strong></label>
						<input class="form-control" id="ganancia" @bind="Ganancia" @bind:event="oninput" />
						<ValidationMessage For="(()=> Articulo.Ganancia)" />
					</div>
					@*Precio*@
					<div class="col-3">
						<label class="form-label" for="precio"><strong>Precio</strong></label>
						<label class="form-control" id="precio">@Articulo.Precio.ToString("N2")</label>
					</div>
				</div>
			</div>
			@*Footer*@
			<div class="card-footer">
				<button class="bi bi-pencil-square btn btn-outline-success" type="submit"> Editar </button>
				<button class="btn btn-outline-secondary bi bi-arrow-90deg-left" @onclick="Volver">Volver</button>
			</div>
		</div>
	</div>
</EditForm>
@Mensaje

@code {

	[Parameter]
	public int ArticuloId { get; set; }

	public Articulos Articulo { get; set; } = new Articulos();
	public string Mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Articulo = await articuloService.GetPorIdAsync(ArticuloId);
	}

	private async Task Editar()
	{
		if (await Validar())
		{
			Mensaje = "Ya existe un articulo con esta descripción";
			return;
		}

		var crear = await articuloService.ModificarAsync(ArticuloId,Articulo);
		if (crear != null)
			Mensaje = $"El artículo {Articulo.Descripcion} se ha Editado correctamente";

		else
			Mensaje = "No se ha Editado correctamente";
	}

	public double Costo
	{
		get => Articulo.Costo;
		set
		{
			if (Articulo.Costo != value)
			{
				Articulo.Costo = value;
				CalcularPrecio();
			}
		}
	}

	public double Ganancia
	{
		get => Articulo.Ganancia;
		set
		{
			if (Articulo.Ganancia != value)
			{
				Articulo.Ganancia = value;
				CalcularPrecio();
			}
		}

	}

	private void CalcularPrecio()
	{
		Articulo.Precio = Articulo.Costo + (Articulo.Costo * (Articulo.Ganancia / 100));
	}

	private async Task<bool> Validar()
	{
		var lista = await articuloService.GetTodoAsync();
		if (lista.Where(d => d.Descripcion!.ToLower() == Articulo.Descripcion!.ToLower()).Any())
			return true;
		return false;
	}

	public void Volver() => navigation.NavigateTo("/Articulo/Index");
}
